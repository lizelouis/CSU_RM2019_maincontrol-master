<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\RM2018.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\RM2018.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Sat Oct 06 19:03:35 2018
<BR><P>
<H3>Maximum Stack Usage =        320 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d1]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[28]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[28]">ADC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[10]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2a]">CAN1_RX0_IRQHandler</a> from can.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2b]">CAN1_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2c]">CAN1_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[29]">CAN1_TX_IRQHandler</a> from can.o(i.CAN1_TX_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[56]">CAN2_RX0_IRQHandler</a> from can.o(i.CAN2_RX0_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[57]">CAN2_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[58]">CAN2_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[55]">CAN2_TX_IRQHandler</a> from can.o(i.CAN2_TX_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[65]">CRYP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[64]">DCMI_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream1_IRQHandler</a> from uart_dma.o(i.DMA1_Stream1_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[45]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream2_IRQHandler</a> from dbus.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5c]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[13]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[53]">ETH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[54]">ETH_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1c]">EXTI0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3e]">EXTI15_10_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1d]">EXTI1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1e]">EXTI2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1f]">EXTI3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[20]">EXTI4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2d]">EXTI9_5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1a]">FLASH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[67]">FPU_IRQHandler</a> from stm32f4xx_it.o(i.FPU_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[46]">FSMC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[66]">HASH_RNG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[e]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[36]">I2C1_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[35]">I2C1_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[38]">I2C2_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[37]">I2C2_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5f]">I2C3_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5e]">I2C3_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[f]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[d]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[59]">OTG_FS_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[40]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[61]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[60]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[63]">OTG_HS_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[62]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[17]">PVD_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[14]">PendSV_Handler</a> from makos_pendsv.o(.emb_text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1b]">RCC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3f]">RTC_Alarm_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[19]">RTC_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[c]">Reset_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[47]">SDIO_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[39]">SPI1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3a]">SPI2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[49]">SPI3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[12]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[15]">SysTick_Handler</a> from makos_tick.o(i.SysTick_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[68]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[18]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2e]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[31]">TIM1_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[30]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2f]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[32]">TIM2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[33]">TIM3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[34]">TIM4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[48]">TIM5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4c]">TIM6_DAC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4d]">TIM7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[41]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[44]">TIM8_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[43]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[42]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4a]">UART4_IRQHandler</a> from usart.o(i.UART4_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4b]">UART5_IRQHandler</a> from usart.o(i.UART5_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3b]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3c]">USART2_IRQHandler</a> from usart.o(i.USART2_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3d]">USART3_IRQHandler</a> from usart.o(i.USART3_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5d]">USART6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[11]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[16]">WWDG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[9b]">__main</a> from __main.o(!!!main) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[6b]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[7a]">adc_print</a> from task_chassis.o(i.adc_print) referenced from task_chassis.o(i.task_chassis)
 <LI><a href="#[77]">bullet_control</a> from task_bullet.o(i.bullet_control) referenced from task_bullet.o(i.task_bullet)
 <LI><a href="#[78]">camera_move</a> from task_camera_move.o(i.camera_move) referenced from task_camera_move.o(i.task_camera_move)
 <LI><a href="#[83]">car_clip</a> from task_clip.o(i.car_clip) referenced from task_clip.o(i.task_clip)
 <LI><a href="#[79]">car_rise</a> from task_car_rise_engineer.o(i.car_rise) referenced from task_car_rise_engineer.o(i.task_car_rise_engineer)
 <LI><a href="#[6d]">dbus_error_handle</a> from dbus.o(i.dbus_error_handle) referenced from dbus.o(i.dbus_init)
 <LI><a href="#[8]">emptyf</a> from dbus.o(i.emptyf) referenced 14 times from dbus.o(.data)
 <LI><a href="#[6a]">fputc</a> from usart.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[95]">get_memory_info</a> from makos_record.o(i.get_memory_info) referenced from makos_record.o(i.task_record)
 <LI><a href="#[84]">guard_move</a> from task_guard.o(i.guard_move) referenced from task_guard.o(i.task_guard_move)
 <LI><a href="#[92]">led_user_control</a> from task_led.o(i.led_user_control) referenced from task_led.o(i.task_led_user)
 <LI><a href="#[a]">my_mem_init</a> from makos_memory.o(i.my_mem_init) referenced 2 times from makos_memory.o(.data)
 <LI><a href="#[b]">my_mem_perused</a> from makos_memory.o(i.my_mem_perused) referenced 2 times from makos_memory.o(.data)
 <LI><a href="#[81]">pid_show</a> from task_chassis.o(i.pid_show) referenced from task_chassis.o(i.task_chassis)
 <LI><a href="#[75]">receiver_control</a> from task_remote.o(i.receiver_control) referenced from task_remote.o(i.remote_test)
 <LI><a href="#[93]">record_control</a> from makos_record.o(i.record_control) referenced from makos_record.o(i.task_record)
 <LI><a href="#[96]">remote_handle</a> from task_remote.o(i.remote_handle) referenced from task_remote.o(i.task_remote)
 <LI><a href="#[97]">remote_test</a> from task_remote.o(i.remote_test) referenced from task_remote.o(i.task_remote)
 <LI><a href="#[76]">serial_handler</a> from usart.o(i.serial_handler) referenced from usart.o(i.serial_init)
 <LI><a href="#[85]">set_cpu_print</a> from makos_idle.o(i.set_cpu_print) referenced from makos_idle.o(i.task_idle)
 <LI><a href="#[98]">shoot_control</a> from task_shoot.o(i.shoot_control) referenced from task_shoot.o(i.task_shoot)
 <LI><a href="#[99]">shoot_test_control</a> from task_shoot.o(i.shoot_test_control) referenced from task_shoot.o(i.task_shoot)
 <LI><a href="#[7b]">speed_show_set</a> from task_chassis.o(i.speed_show_set) referenced from task_chassis.o(i.task_chassis)
 <LI><a href="#[94]">stack_print</a> from makos_record.o(i.stack_print) referenced from makos_record.o(i.task_record)
 <LI><a href="#[6c]">supply_pid_calc</a> from supply_motor.o(i.supply_pid_calc) referenced from task_car_rise_engineer.o(i.car_rise_init)
 <LI><a href="#[6c]">supply_pid_calc</a> from supply_motor.o(i.supply_pid_calc) referenced from task_guard.o(i.guard_move_init)
 <LI><a href="#[6c]">supply_pid_calc</a> from supply_motor.o(i.supply_pid_calc) referenced from task_bullet.o(i.strech_init)
 <LI><a href="#[71]">task_PRINT</a> from makos_print.o(i.task_PRINT) referenced from makos_system.o(i.makos_init)
 <LI><a href="#[8a]">task_bullet</a> from task_bullet.o(i.task_bullet) referenced from task_init.o(i.task_init)
 <LI><a href="#[8c]">task_camera_move</a> from task_camera_move.o(i.task_camera_move) referenced from task_init.o(i.task_init)
 <LI><a href="#[8f]">task_car_rise_engineer</a> from task_car_rise_engineer.o(i.task_car_rise_engineer) referenced from task_init.o(i.task_init)
 <LI><a href="#[89]">task_car_rise_hero</a> from task_car_rise_hero.o(i.task_car_rise_hero) referenced from task_init.o(i.task_init)
 <LI><a href="#[87]">task_chassis</a> from task_chassis.o(i.task_chassis) referenced from task_init.o(i.task_init)
 <LI><a href="#[8b]">task_clip</a> from task_clip.o(i.task_clip) referenced from task_init.o(i.task_init)
 <LI><a href="#[8d]">task_drag</a> from task_drag.o(i.task_drag) referenced from task_init.o(i.task_init)
 <LI><a href="#[8e]">task_give</a> from task_give.o(i.task_give) referenced from task_init.o(i.task_init)
 <LI><a href="#[90]">task_guard_move</a> from task_guard.o(i.task_guard_move) referenced from task_init.o(i.task_init)
 <LI><a href="#[73]">task_idle</a> from makos_idle.o(i.task_idle) referenced from makos_system.o(i.makos_init)
 <LI><a href="#[6f]">task_init</a> from task_init.o(i.task_init) referenced from main.o(i.main)
 <LI><a href="#[70]">task_led_sys</a> from task_led.o(i.task_led_sys) referenced from main.o(i.main)
 <LI><a href="#[91]">task_led_user</a> from task_led.o(i.task_led_user) referenced from task_led.o(i.task_led_sys)
 <LI><a href="#[74]">task_record</a> from makos_record.o(i.task_record) referenced from makos_system.o(i.makos_init)
 <LI><a href="#[86]">task_remote</a> from task_remote.o(i.task_remote) referenced from task_init.o(i.task_init)
 <LI><a href="#[72]">task_resolver</a> from makos_resolver.o(i.task_resolver) referenced from makos_system.o(i.makos_init)
 <LI><a href="#[88]">task_shoot</a> from task_shoot.o(i.task_shoot) referenced from task_init.o(i.task_init)
 <LI><a href="#[9a]">task_shoot_control</a> from task_shoot.o(i.task_shoot_control) referenced from task_shoot.o(i.task_shoot)
 <LI><a href="#[6e]">tick_handle</a> from makos_tick_handle.o(i.tick_handle) referenced from makos_tick_handle.o(i.init_tick_callback)
 <LI><a href="#[7f]">upper_monit_err_lim</a> from task_chassis.o(i.upper_monit_err_lim) referenced from task_chassis.o(i.task_chassis)
 <LI><a href="#[7e]">upper_monit_kd</a> from task_chassis.o(i.upper_monit_kd) referenced from task_chassis.o(i.task_chassis)
 <LI><a href="#[7d]">upper_monit_ki</a> from task_chassis.o(i.upper_monit_ki) referenced from task_chassis.o(i.task_chassis)
 <LI><a href="#[7c]">upper_monit_kp</a> from task_chassis.o(i.upper_monit_kp) referenced from task_chassis.o(i.task_chassis)
 <LI><a href="#[82]">v_k_func</a> from task_chassis.o(i.v_k_func) referenced from task_chassis.o(i.task_chassis)
 <LI><a href="#[80]">wave_key</a> from task_chassis.o(i.wave_key) referenced from task_chassis.o(i.task_chassis)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[9c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[9e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1be]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1bf]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1c0]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1c1]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1c2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[9f]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[bd]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[a1]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a3]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[a5]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[1c3]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[b0]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a7]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1c4]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1c5]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1c6]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1c7]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[1c8]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1c9]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1ca]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1cb]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[1cc]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1cd]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1ce]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1cf]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1d0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1d1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1d2]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1d3]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1d4]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[1d5]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1d6]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[b5]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1d7]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1d8]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1d9]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1da]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1db]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[1dc]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[9d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1dd]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[ad]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[af]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1de]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[b1]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; makos_init &rArr; task_create_full &rArr; pipe_init &rArr; irq_close &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1df]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[d2]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b4]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1e0]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[b6]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[14]"></a>PendSV_Handler</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, makos_pendsv.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1e1]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_k_func
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_kp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_ki
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_kd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_err_lim
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_current
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_chassis_speed
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_show
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_buff_checked
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_test
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_handle
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_remote
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_bullet
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_led_user
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create_full
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makos_run
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makos_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_print
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_clip
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_error_handle
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resolver
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_record
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_idle
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makos_update_switch
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPU_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_print
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_memory_info
</UL>

<P><STRONG><a name="[ca]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[a2]"></a>_printf_int_dec</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[a4]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[1e2]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__printf</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, __printf_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1e3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[be]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resolver
</UL>

<P><STRONG><a name="[1e6]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1e9]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>_printf_fp_dec_real</STRONG> (Thumb, 616 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[c9]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[cb]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[a6]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[b9]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[ce]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1ea]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1ec]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[c5]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cc]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[c8]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[c1]"></a>_btod_etento</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cd]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[ae]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[b3]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1b0]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[c2]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d4]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[d3]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[d5]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[d6]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[c3]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c4]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d7]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[e3]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[de]"></a>ADC_CommonInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_CommonInit))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[d8]"></a>ADC_Config</STRONG> (Thumb, 344 bytes, Stack size 112 bytes, adc.o(i.ADC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ADC_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
</UL>

<P><STRONG><a name="[e2]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[e1]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DMARequestAfterLastTransferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[df]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[e0]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[191]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_SoftwareStartConv))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
</UL>

<P><STRONG><a name="[10]"></a>BusFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = BusFault_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>CAN1_Configuration</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, can.o(i.CAN1_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CAN1_Configuration &rArr; CAN1_mode_Configuration &rArr; CAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_mode_Configuration
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_NVIC_Configuration
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_GPIO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>

<P><STRONG><a name="[e5]"></a>CAN1_GPIO_Configuration</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, can.o(i.CAN1_GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN1_GPIO_Configuration &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Configuration
</UL>

<P><STRONG><a name="[e6]"></a>CAN1_NVIC_Configuration</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, can.o(i.CAN1_NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN1_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Configuration
</UL>

<P><STRONG><a name="[2a]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, can.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearFlag
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circle_count
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, can.o(i.CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN1_TX_IRQHandler &rArr; CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>CAN1_mode_Configuration</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, can.o(i.CAN1_mode_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CAN1_mode_Configuration &rArr; CAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Configuration
</UL>

<P><STRONG><a name="[56]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, can.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_0_protec
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearFlag
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circle_count_simple
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circle_count
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, can.o(i.CAN2_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN2_TX_IRQHandler &rArr; CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>CAN_ClearFlag</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>CAN_ClearITPendingBit</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[f0]"></a>CAN_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_mode_Configuration
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_mode_Configuration
</UL>

<P><STRONG><a name="[f3]"></a>CAN_FilterInit</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_mode_Configuration
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_mode_Configuration
</UL>

<P><STRONG><a name="[eb]"></a>CAN_GetITStatus</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, stm32f4xx_can.o(i.CAN_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>CAN_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_mode_Configuration
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_mode_Configuration
</UL>

<P><STRONG><a name="[f2]"></a>CAN_Init</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, stm32f4xx_can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_mode_Configuration
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_mode_Configuration
</UL>

<P><STRONG><a name="[ee]"></a>CAN_Receive</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>CAN_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_mode_Configuration
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_mode_Configuration
</UL>

<P><STRONG><a name="[110]"></a>CAN_Transmit</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_guard_move
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_car_rise_hero
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_rise_motor
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_update
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RM6025_set_yaw
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_can
</UL>

<P><STRONG><a name="[22]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uart_dma.o(i.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrentMemoryTarget
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dbus.o(i.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_dead_check
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_mode_usart
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_mode_usart
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_mode_dma
</UL>

<P><STRONG><a name="[145]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_init
</UL>

<P><STRONG><a name="[fb]"></a>DMA_GetCurrentMemoryTarget</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCurrentMemoryTarget))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>DMA_GetITStatus</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>DMA_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_init
</UL>

<P><STRONG><a name="[db]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_init
</UL>

<P><STRONG><a name="[13]"></a>DebugMon_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = DebugMon_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>FD_check</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, flash_data.o(i.FD_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FD_check &rArr; Flash_Read32BitDatas
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read32BitDatas
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>FD_print</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, flash_data.o(i.FD_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = FD_print &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>FD_set</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, flash_data.o(i.FD_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FD_set &rArr; Flash_Write32BitDatas &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write32BitDatas
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read32BitDatas
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write32BitDatas
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseSector
</UL>

<P><STRONG><a name="[103]"></a>FLASH_EraseSector</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f4xx_flash.o(i.FLASH_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write32BitDatas
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseSector
</UL>

<P><STRONG><a name="[106]"></a>FLASH_GetStatus</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[109]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write32BitDatas
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseSector
</UL>

<P><STRONG><a name="[105]"></a>FLASH_ProgramWord</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write32BitDatas
</UL>

<P><STRONG><a name="[107]"></a>FLASH_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write32BitDatas
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseSector
</UL>

<P><STRONG><a name="[104]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>

<P><STRONG><a name="[67]"></a>FPU_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.FPU_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = FPU_IRQHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>Flash_EraseSector</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32_flash.o(i.Flash_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Flash_EraseSector &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_set
</UL>

<P><STRONG><a name="[fe]"></a>Flash_Read32BitDatas</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32_flash.o(i.Flash_Read32BitDatas))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_Read32BitDatas
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_set
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_check
</UL>

<P><STRONG><a name="[102]"></a>Flash_Write32BitDatas</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, stm32_flash.o(i.Flash_Write32BitDatas))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Flash_Write32BitDatas &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSector
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_set
</UL>

<P><STRONG><a name="[dd]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_clip
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mled_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_GPIO_Configuration
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_GPIO_Configuration
</UL>

<P><STRONG><a name="[e9]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_GPIO_Configuration
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_GPIO_Configuration
</UL>

<P><STRONG><a name="[137]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_clip
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mled_off
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_clip
</UL>

<P><STRONG><a name="[138]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_clip
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mled_off
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_clip
</UL>

<P><STRONG><a name="[163]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ToggleBits))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mled_toggle
</UL>

<P><STRONG><a name="[10a]"></a>GetSector</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, stm32_flash.o(i.GetSector))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write32BitDatas
</UL>

<P><STRONG><a name="[e]"></a>HardFault_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>MemManage_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = MemManage_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>NMI_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = NMI_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_NVIC_Configuration
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_NVIC_Configuration
</UL>

<P><STRONG><a name="[15a]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makos_init
</UL>

<P><STRONG><a name="[10c]"></a>PID_Struct_Init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, pid.o(i.PID_Struct_Init))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_current_Init
</UL>

<P><STRONG><a name="[10e]"></a>PID_Struct_Init_abs</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pid.o(i.PID_Struct_Init_abs))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_speed_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
</UL>

<P><STRONG><a name="[13d]"></a>PID_Update_Absolute2</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, pid.o(i.PID_Update_Absolute2))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_move
</UL>

<P><STRONG><a name="[13e]"></a>PID_Update_Incre</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, pid.o(i.PID_Update_Incre))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_move
</UL>

<P><STRONG><a name="[10b]"></a>PID_current_Init</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, pid.o(i.PID_current_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PID_current_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Struct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
</UL>

<P><STRONG><a name="[10d]"></a>PID_speed_Init</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, pid.o(i.PID_speed_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PID_speed_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Struct_Init_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
</UL>

<P><STRONG><a name="[d9]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mled_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_GPIO_Configuration
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_GPIO_Configuration
</UL>

<P><STRONG><a name="[e8]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_clip
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_GPIO_Configuration
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_GPIO_Configuration
</UL>

<P><STRONG><a name="[f7]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>

<P><STRONG><a name="[da]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[123]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[130]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[19a]"></a>RM6025_set_data_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, task_holder.o(i.RM6025_set_data_init))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_drag
</UL>

<P><STRONG><a name="[10f]"></a>RM6025_set_yaw</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, task_holder.o(i.RM6025_set_yaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RM6025_set_yaw &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAVE
</UL>

<P><STRONG><a name="[111]"></a>SAVE</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, task_drag.o(i.SAVE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SAVE &rArr; RM6025_set_yaw &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RM6025_set_yaw
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_drag
</UL>

<P><STRONG><a name="[12]"></a>SVC_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = SVC_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SysTick_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, makos_tick.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(.text)
</UL>
<P><STRONG><a name="[113]"></a>TIM3_init</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, tim3_4.o(i.TIM3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TIM3_init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_give
</UL>

<P><STRONG><a name="[11b]"></a>TIM4_init</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, tim3_4.o(i.TIM4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = TIM4_init &rArr; TIM_ICInit &rArr; TI4_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EncoderInterfaceConfig
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICStructInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_give
</UL>

<P><STRONG><a name="[1a7]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
</UL>

<P><STRONG><a name="[120]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
</UL>

<P><STRONG><a name="[11a]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
</UL>

<P><STRONG><a name="[119]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
</UL>

<P><STRONG><a name="[122]"></a>TIM_DeInit</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, stm32f4xx_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
</UL>

<P><STRONG><a name="[11d]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f4xx_tim.o(i.TIM_EncoderInterfaceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_EncoderInterfaceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
</UL>

<P><STRONG><a name="[11f]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_ICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM_ICInit &rArr; TI4_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
</UL>

<P><STRONG><a name="[11e]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ICStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
</UL>

<P><STRONG><a name="[121]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
</UL>

<P><STRONG><a name="[115]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
</UL>

<P><STRONG><a name="[117]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
</UL>

<P><STRONG><a name="[116]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
</UL>

<P><STRONG><a name="[118]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
</UL>

<P><STRONG><a name="[1a3]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
</UL>

<P><STRONG><a name="[1a5]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
</UL>

<P><STRONG><a name="[1a4]"></a>TIM_OC4Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
</UL>

<P><STRONG><a name="[1a6]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
</UL>

<P><STRONG><a name="[125]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[127]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[129]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC3Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[12b]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC4Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[114]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
</UL>

<P><STRONG><a name="[11c]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
</UL>

<P><STRONG><a name="[4a]"></a>UART4_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART4_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_dead_check
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART5_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART5_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_dead_check
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART1_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_dead_check
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USART2_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_dead_check
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART3_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_dead_check
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[12d]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_mode_dma
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[146]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[148]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_init
</UL>

<P><STRONG><a name="[12e]"></a>USART_DeInit</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_init
</UL>

<P><STRONG><a name="[1ae]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_send_char
</UL>

<P><STRONG><a name="[12c]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[149]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_mode_usart
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_mode_dma
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolver_init
</UL>

<P><STRONG><a name="[12f]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[1af]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_send_char
</UL>

<P><STRONG><a name="[11]"></a>UsageFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = UsageFault_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[bc]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[b7]"></a>_sys_exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[199]"></a>ad_filter</STRONG> (Thumb, 140 bytes, Stack size 44 bytes, task_chassis.o(i.ad_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ad_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
</UL>

<P><STRONG><a name="[7a]"></a>adc_print</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_chassis.o(i.adc_print))
<BR>[Address Reference Count : 1]<UL><LI> task_chassis.o(i.task_chassis)
</UL>
<P><STRONG><a name="[77]"></a>bullet_control</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task_bullet.o(i.bullet_control))
<BR>[Address Reference Count : 1]<UL><LI> task_bullet.o(i.task_bullet)
</UL>
<P><STRONG><a name="[78]"></a>camera_move</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, task_camera_move.o(i.camera_move))
<BR>[Address Reference Count : 1]<UL><LI> task_camera_move.o(i.task_camera_move)
</UL>
<P><STRONG><a name="[131]"></a>can2_Configuration</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, can.o(i.can2_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = can2_Configuration &rArr; can2_mode_Configuration &rArr; CAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_mode_Configuration
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_NVIC_Configuration
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_GPIO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>

<P><STRONG><a name="[132]"></a>can2_GPIO_Configuration</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, can.o(i.can2_GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = can2_GPIO_Configuration &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_Configuration
</UL>

<P><STRONG><a name="[133]"></a>can2_NVIC_Configuration</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, can.o(i.can2_NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_Configuration
</UL>

<P><STRONG><a name="[134]"></a>can2_mode_Configuration</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, can.o(i.can2_mode_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = can2_mode_Configuration &rArr; CAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_Configuration
</UL>

<P><STRONG><a name="[13a]"></a>can_set</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, can.o(i.can_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = can_set
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_guard_move
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_car_rise_hero
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_rise_motor
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_update
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_can
</UL>

<P><STRONG><a name="[83]"></a>car_clip</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, task_clip.o(i.car_clip))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = car_clip &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_clip.o(i.task_clip)
</UL>
<P><STRONG><a name="[79]"></a>car_rise</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task_car_rise_engineer.o(i.car_rise))
<BR>[Address Reference Count : 1]<UL><LI> task_car_rise_engineer.o(i.task_car_rise_engineer)
</UL>
<P><STRONG><a name="[18e]"></a>car_rise_init</STRONG> (Thumb, 268 bytes, Stack size 0 bytes, task_car_rise_engineer.o(i.car_rise_init))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_car_rise_engineer
</UL>

<P><STRONG><a name="[139]"></a>car_rise_motor</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, task_car_rise_engineer.o(i.car_rise_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = car_rise_motor &rArr; can_set
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_car_rise_engineer
</UL>

<P><STRONG><a name="[13b]"></a>chassis_move</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, motor.o(i.chassis_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = chassis_move &rArr; send_can &rArr; can_set
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_symbol
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_can
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_0_protec
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Update_Incre
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Update_Absolute2
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_stop
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
</UL>

<P><STRONG><a name="[140]"></a>chassis_stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, motor.o(i.chassis_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = chassis_stop &rArr; chassis_move &rArr; send_can &rArr; can_set
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_move
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
</UL>

<P><STRONG><a name="[ef]"></a>circle_count</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, can.o(i.circle_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = circle_count
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>circle_count_simple</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, can.o(i.circle_count_simple))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>dbus_buff_checked</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, dbus.o(i.dbus_buff_checked))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dbus_buff_checked &rArr; dbus_mode_usart &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_mode_usart
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_test
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_handle
</UL>

<P><STRONG><a name="[6d]"></a>dbus_error_handle</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, dbus.o(i.dbus_error_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dbus_error_handle &rArr; dbus_mode_dma &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_mode_dma
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbus.o(i.dbus_init)
</UL>
<P><STRONG><a name="[144]"></a>dbus_init</STRONG> (Thumb, 484 bytes, Stack size 72 bytes, dbus.o(i.dbus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = dbus_init &rArr; dbus_mode_dma &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_mode_dma
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_remote
</UL>

<P><STRONG><a name="[143]"></a>dbus_mode_dma</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dbus.o(i.dbus_mode_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = dbus_mode_dma &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_error_handle
</UL>

<P><STRONG><a name="[142]"></a>dbus_mode_usart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dbus.o(i.dbus_mode_usart))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = dbus_mode_usart &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_buff_checked
</UL>

<P><STRONG><a name="[151]"></a>delay_short</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.delay_short))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a]"></a>dndqueue_add_last</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, makos_dnode_queue.o(i.dndqueue_add_last))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = dndqueue_add_last &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnode_add_last
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_add
</UL>

<P><STRONG><a name="[14d]"></a>dndqueue_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, makos_dnode_queue.o(i.dndqueue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dndqueue_init
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnode_head_init
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolver_init
</UL>

<P><STRONG><a name="[1a2]"></a>dnode_add_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, makos_doublelist.o(i.dnode_add_first))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
</UL>

<P><STRONG><a name="[14c]"></a>dnode_add_last</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, makos_doublelist.o(i.dnode_add_last))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create_full
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dndqueue_add_last
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_handle
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_set_prio
</UL>

<P><STRONG><a name="[14e]"></a>dnode_head_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, makos_doublelist.o(i.dnode_head_init))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makos_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dndqueue_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
</UL>

<P><STRONG><a name="[171]"></a>dnode_remove</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, makos_doublelist.o(i.dnode_remove))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_handle
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_set_prio
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
</UL>

<P><STRONG><a name="[6a]"></a>fputc</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = fputc &rArr; pipe_write &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>get_memory_info</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, makos_record.o(i.get_memory_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = get_memory_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_perused
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> makos_record.o(i.task_record)
</UL>
<P><STRONG><a name="[185]"></a>get_stack</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, makos_record.o(i.get_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_print
</UL>

<P><STRONG><a name="[19d]"></a>give_motor_close</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tim3_4.o(i.give_motor_close))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_give
</UL>

<P><STRONG><a name="[19c]"></a>give_motor_open</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tim3_4.o(i.give_motor_open))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_give
</UL>

<P><STRONG><a name="[19b]"></a>give_motor_stop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tim3_4.o(i.give_motor_stop))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_give
</UL>

<P><STRONG><a name="[84]"></a>guard_move</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task_guard.o(i.guard_move))
<BR>[Address Reference Count : 1]<UL><LI> task_guard.o(i.task_guard_move)
</UL>
<P><STRONG><a name="[19e]"></a>guard_move_init</STRONG> (Thumb, 268 bytes, Stack size 0 bytes, task_guard.o(i.guard_move_init))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_guard_move
</UL>

<P><STRONG><a name="[15c]"></a>init_tick_callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, makos_tick_handle.o(i.init_tick_callback))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makos_init
</UL>

<P><STRONG><a name="[135]"></a>irq_close</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, makos_critical.o(i.irq_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = irq_close &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_finish_try
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_kp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_ki
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_kd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_err_lim
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_current
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_chassis_speed
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_show
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_write_finish_last
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_write_finish
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_finish
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_get_write_last
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_buff_checked
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_test
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_handle
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_remote
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_bullet
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_led_user
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_led_sys
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_clip
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_mode_usart
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_mode_dma
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_error_handle
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dndqueue_add_last
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_handle
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resolver
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_idle
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makos_update_switch
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_set_prio
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock_try
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
</UL>

<P><STRONG><a name="[fc]"></a>irq_dead_check</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, irq_dead_check.o(i.irq_dead_check))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>irq_restore</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, makos_critical.o(i.irq_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_finish_try
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_kp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_ki
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_kd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_err_lim
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_current
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_chassis_speed
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_show
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_write_finish_last
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_write_finish
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_finish
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_get_write_last
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_buff_checked
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_test
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_handle
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_remote
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_bullet
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_led_user
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_led_sys
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_clip
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_mode_usart
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_mode_dma
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_error_handle
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dndqueue_add_last
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_handle
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resolver
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_idle
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makos_update_switch
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_set_prio
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock_try
</UL>

<P><STRONG><a name="[198]"></a>is_2s_interval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, task_chassis.o(i.is_2s_interval))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
</UL>

<P><STRONG><a name="[92]"></a>led_user_control</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_led.o(i.led_user_control))
<BR>[Address Reference Count : 1]<UL><LI> task_led.o(i.task_led_user)
</UL>
<P><STRONG><a name="[b2]"></a>main</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = main &rArr; makos_init &rArr; task_create_full &rArr; pipe_init &rArr; irq_close &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create_full
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makos_run
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makos_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_set
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_print
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_check
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_short
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[155]"></a>mak_print</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, mak_print.o(i.mak_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = mak_print &rArr; mak_print_float &rArr; mak_print_s32 &rArr; mak_print_u8 &rArr; pipe_write &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mak_print_u8
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mak_print_string
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mak_print_s32
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mak_print_float
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_idle
</UL>

<P><STRONG><a name="[159]"></a>mak_print_float</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, mak_print.o(i.mak_print_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = mak_print_float &rArr; mak_print_s32 &rArr; mak_print_u8 &rArr; pipe_write &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mak_print_u8
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mak_print_s32
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mak_print
</UL>

<P><STRONG><a name="[158]"></a>mak_print_s32</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, mak_print.o(i.mak_print_s32))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = mak_print_s32 &rArr; mak_print_u8 &rArr; pipe_write &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mak_print_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mak_print
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mak_print_float
</UL>

<P><STRONG><a name="[157]"></a>mak_print_string</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mak_print.o(i.mak_print_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = mak_print_string &rArr; mak_print_u8 &rArr; pipe_write &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mak_print_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mak_print
</UL>

<P><STRONG><a name="[156]"></a>mak_print_u8</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mak_print.o(i.mak_print_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mak_print_u8 &rArr; pipe_write &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_write
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mak_print
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mak_print_string
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mak_print_s32
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mak_print_float
</UL>

<P><STRONG><a name="[15d]"></a>makos_get_prio_highest</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, makos_system.o(i.makos_get_prio_highest))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makos_run
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makos_update_switch
</UL>

<P><STRONG><a name="[152]"></a>makos_init</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, makos_system.o(i.makos_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = makos_init &rArr; task_create_full &rArr; pipe_init &rArr; irq_close &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create_full
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnode_head_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tick_callback
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[154]"></a>makos_run</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, makos_system.o(i.makos_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = makos_run &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_start
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makos_get_prio_highest
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15f]"></a>makos_update_switch</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, makos_system.o(i.makos_update_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makos_get_prio_highest
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_handle
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
</UL>

<P><STRONG><a name="[160]"></a>mled_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, led.o(i.mled_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mled_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mled_off
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_led_sys
</UL>

<P><STRONG><a name="[161]"></a>mled_off</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, led.o(i.mled_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mled_off
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mled_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_led_user
</UL>

<P><STRONG><a name="[162]"></a>mled_toggle</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.mled_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mled_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_led_user
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_led_sys
</UL>

<P><STRONG><a name="[18f]"></a>mpid_init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, mak_pid.o(i.mpid_init))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_car_rise_hero
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot_control
</UL>

<P><STRONG><a name="[190]"></a>mpid_v</STRONG> (Thumb, 232 bytes, Stack size 0 bytes, mak_pid.o(i.mpid_v))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_car_rise_hero
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot_control
</UL>

<P><STRONG><a name="[18c]"></a>msg_get_read_try</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, makos_message.o(i.msg_get_read_try))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_remote
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_give
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_drag
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_clip
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_car_rise_hero
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_car_rise_engineer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_camera_move
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_bullet
</UL>

<P><STRONG><a name="[164]"></a>msg_get_write_last</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, makos_message.o(i.msg_get_write_last))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = msg_get_write_last &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_handle
</UL>

<P><STRONG><a name="[165]"></a>msg_get_write_try</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, makos_message.o(i.msg_get_write_try))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = msg_get_write_try &rArr; mutex_lock_try &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock_try
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_lift_bullet_view
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_holder_shoot
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_drag_give
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_chassis
</UL>

<P><STRONG><a name="[167]"></a>msg_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, makos_message.o(i.msg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = msg_init &rArr; mutex_init &rArr; irq_close &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_send_msg_init
</UL>

<P><STRONG><a name="[16a]"></a>msg_read_finish</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, makos_message.o(i.msg_read_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = msg_read_finish &rArr; task_resume &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_remote
</UL>

<P><STRONG><a name="[16c]"></a>msg_read_finish_try</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, makos_message.o(i.msg_read_finish_try))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = msg_read_finish_try &rArr; task_resume &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_give
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_drag
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_clip
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_car_rise_hero
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_car_rise_engineer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_camera_move
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_bullet
</UL>

<P><STRONG><a name="[16d]"></a>msg_write_finish</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, makos_message.o(i.msg_write_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = msg_write_finish &rArr; mutex_unlock &rArr; task_set_prio &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_lift_bullet_view
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_holder_shoot
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_drag_give
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_chassis
</UL>

<P><STRONG><a name="[16f]"></a>msg_write_finish_last</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, makos_message.o(i.msg_write_finish_last))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = msg_write_finish_last &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_handle
</UL>

<P><STRONG><a name="[169]"></a>mutex_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, makos_mutex.o(i.mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = mutex_init &rArr; irq_close &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnode_head_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_init
</UL>

<P><STRONG><a name="[166]"></a>mutex_lock_try</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, makos_mutex.o(i.mutex_lock_try))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = mutex_lock_try &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_get_write_try
</UL>

<P><STRONG><a name="[16e]"></a>mutex_unlock</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, makos_mutex.o(i.mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = mutex_unlock &rArr; task_set_prio &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnode_remove
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_set_prio
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_update_ceiling
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_write_finish
</UL>

<P><STRONG><a name="[172]"></a>mutex_update_ceiling</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, makos_mutex.o(i.mutex_update_ceiling))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mutex_update_ceiling
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
</UL>

<P><STRONG><a name="[a]"></a>my_mem_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, makos_memory.o(i.my_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = my_mem_init &rArr; my_mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makos_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> makos_memory.o(.data)
</UL>
<P><STRONG><a name="[174]"></a>my_mem_malloc</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, makos_memory.o(i.my_mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>

<P><STRONG><a name="[b]"></a>my_mem_perused</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, makos_memory.o(i.my_mem_perused))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_mem_perused
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_memory_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> makos_memory.o(.data)
</UL>
<P><STRONG><a name="[173]"></a>my_mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, makos_memory.o(i.my_mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = my_mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
</UL>

<P><STRONG><a name="[168]"></a>mymalloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, makos_memory.o(i.mymalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_add
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create_full
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_init
</UL>

<P><STRONG><a name="[81]"></a>pid_show</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, task_chassis.o(i.pid_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = pid_show &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_chassis.o(i.task_chassis)
</UL>
<P><STRONG><a name="[176]"></a>pipe_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, makos_pipe.o(i.pipe_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = pipe_init &rArr; irq_close &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create_full
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolver_init
</UL>

<P><STRONG><a name="[177]"></a>pipe_read</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, makos_pipe.o(i.pipe_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = pipe_read &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resolver
</UL>

<P><STRONG><a name="[14f]"></a>pipe_write</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, makos_pipe.o(i.pipe_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = pipe_write &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mak_print_u8
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_handler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[187]"></a>pow_of_10</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, makos_resolver.o(i.pow_of_10))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_get_U32
</UL>

<P><STRONG><a name="[178]"></a>print_chassis_speed</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, task_chassis.o(i.print_chassis_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = print_chassis_speed &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
</UL>

<P><STRONG><a name="[179]"></a>print_current</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, task_chassis.o(i.print_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = print_current &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
</UL>

<P><STRONG><a name="[75]"></a>receiver_control</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, task_remote.o(i.receiver_control))
<BR>[Address Reference Count : 1]<UL><LI> task_remote.o(i.remote_test)
</UL>
<P><STRONG><a name="[93]"></a>record_control</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, makos_record.o(i.record_control))
<BR>[Address Reference Count : 1]<UL><LI> makos_record.o(i.task_record)
</UL>
<P><STRONG><a name="[f5]"></a>remote_0_protec</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, motor.o(i.remote_0_protec))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_move
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
</UL>

<P><STRONG><a name="[17a]"></a>remote_chassis</STRONG> (Thumb, 524 bytes, Stack size 16 bytes, task_remote.o(i.remote_chassis))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = remote_chassis &rArr; msg_write_finish &rArr; mutex_unlock &rArr; task_set_prio &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_write_finish
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_get_write_try
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_remote
</UL>

<P><STRONG><a name="[17c]"></a>remote_data_dispose</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, task_remote.o(i.remote_data_dispose))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_test
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_handle
</UL>

<P><STRONG><a name="[192]"></a>remote_data_proc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, task_chassis.o(i.remote_data_proc))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
</UL>

<P><STRONG><a name="[17b]"></a>remote_drag_give</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, task_remote.o(i.remote_drag_give))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = remote_drag_give &rArr; msg_write_finish &rArr; mutex_unlock &rArr; task_set_prio &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_write_finish
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_get_write_try
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_remote
</UL>

<P><STRONG><a name="[96]"></a>remote_handle</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, task_remote.o(i.remote_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = remote_handle &rArr; msg_get_write_last &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_write_finish_last
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_get_write_last
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_buff_checked
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_data_dispose
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_remote.o(i.task_remote)
</UL>
<P><STRONG><a name="[17d]"></a>remote_holder_shoot</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, task_remote.o(i.remote_holder_shoot))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = remote_holder_shoot &rArr; msg_write_finish &rArr; mutex_unlock &rArr; task_set_prio &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_write_finish
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_get_write_try
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_remote
</UL>

<P><STRONG><a name="[17e]"></a>remote_lift_bullet_view</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, task_remote.o(i.remote_lift_bullet_view))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = remote_lift_bullet_view &rArr; msg_write_finish &rArr; mutex_unlock &rArr; task_set_prio &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_write_finish
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_get_write_try
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_remote
</UL>

<P><STRONG><a name="[17f]"></a>remote_send_msg_init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, task_remote.o(i.remote_send_msg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = remote_send_msg_init &rArr; msg_init &rArr; mutex_init &rArr; irq_close &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>

<P><STRONG><a name="[97]"></a>remote_test</STRONG> (Thumb, 548 bytes, Stack size 32 bytes, task_remote.o(i.remote_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = remote_test &rArr; resolve_add &rArr; dndqueue_add_last &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_buff_checked
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_data_dispose
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_add
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_remote.o(i.task_remote)
</UL>
<P><STRONG><a name="[180]"></a>resolve_add</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, makos_resolver.o(i.resolve_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = resolve_add &rArr; dndqueue_add_last &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dndqueue_add_last
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_test
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_guard_move
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_clip
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_car_rise_engineer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_camera_move
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_bullet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_led_user
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_record
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_idle
</UL>

<P><STRONG><a name="[181]"></a>resolver_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, makos_resolver.o(i.resolver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = resolver_init &rArr; pipe_init &rArr; irq_close &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dndqueue_init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resolver
</UL>

<P><STRONG><a name="[13f]"></a>send_can</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, motor.o(i.send_can))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = send_can &rArr; can_set
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_move
</UL>

<P><STRONG><a name="[182]"></a>send_speed_wave</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, task_chassis.o(i.send_speed_wave))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = send_speed_wave &rArr; usart3_send_string &rArr; usart3_send_char
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_send_string
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
</UL>

<P><STRONG><a name="[76]"></a>serial_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usart.o(i.serial_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = serial_handler &rArr; pipe_write &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.serial_init)
</UL>
<P><STRONG><a name="[150]"></a>serial_init</STRONG> (Thumb, 604 bytes, Stack size 40 bytes, usart.o(i.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = serial_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1aa]"></a>set_D</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task_chassis.o(i.set_D))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_kd
</UL>

<P><STRONG><a name="[1ab]"></a>set_I</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task_chassis.o(i.set_I))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_ki
</UL>

<P><STRONG><a name="[1ac]"></a>set_P</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task_chassis.o(i.set_P))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_kp
</UL>

<P><STRONG><a name="[85]"></a>set_cpu_print</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, makos_idle.o(i.set_cpu_print))
<BR>[Address Reference Count : 1]<UL><LI> makos_idle.o(i.task_idle)
</UL>
<P><STRONG><a name="[13c]"></a>set_current_symbol</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, motor.o(i.set_current_symbol))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_move
</UL>

<P><STRONG><a name="[1a9]"></a>set_err_lim</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task_chassis.o(i.set_err_lim))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_err_lim
</UL>

<P><STRONG><a name="[98]"></a>shoot_control</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task_shoot.o(i.shoot_control))
<BR>[Address Reference Count : 1]<UL><LI> task_shoot.o(i.task_shoot)
</UL>
<P><STRONG><a name="[99]"></a>shoot_test_control</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, task_shoot.o(i.shoot_test_control))
<BR>[Address Reference Count : 1]<UL><LI> task_shoot.o(i.task_shoot)
</UL>
<P><STRONG><a name="[7b]"></a>speed_show_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_chassis.o(i.speed_show_set))
<BR>[Address Reference Count : 1]<UL><LI> task_chassis.o(i.task_chassis)
</UL>
<P><STRONG><a name="[184]"></a>speed_update</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, supply_motor.o(i.speed_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = speed_update &rArr; can_set
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot_control
</UL>

<P><STRONG><a name="[94]"></a>stack_print</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, makos_record.o(i.stack_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = stack_print &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stack
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> makos_record.o(i.task_record)
</UL>
<P><STRONG><a name="[18b]"></a>strech_init</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, task_bullet.o(i.strech_init))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_bullet
</UL>

<P><STRONG><a name="[18d]"></a>strech_motor</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, task_bullet.o(i.strech_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strech_motor
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_bullet
</UL>

<P><STRONG><a name="[1a1]"></a>string_compare</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, makos_resolver.o(i.string_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = string_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resolver
</UL>

<P><STRONG><a name="[186]"></a>string_get_U32</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, makos_resolver.o(i.string_get_U32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = string_get_U32
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow_of_10
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resolver
</UL>

<P><STRONG><a name="[188]"></a>string_to_float</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, makos_resolver.o(i.string_to_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = string_to_float &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resolver
</UL>

<P><STRONG><a name="[6c]"></a>supply_pid_calc</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, supply_motor.o(i.supply_pid_calc))
<BR>[Address Reference Count : 3]<UL><LI> task_guard.o(i.guard_move_init)
<LI> task_car_rise_engineer.o(i.car_rise_init)
<LI> task_bullet.o(i.strech_init)
</UL>
<P><STRONG><a name="[71]"></a>task_PRINT</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, makos_print.o(i.task_PRINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = task_PRINT &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> makos_system.o(i.makos_init)
</UL>
<P><STRONG><a name="[8a]"></a>task_bullet</STRONG> (Thumb, 354 bytes, Stack size 0 bytes, task_bullet.o(i.task_bullet))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = task_bullet &rArr; resolve_add &rArr; dndqueue_add_last &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_finish_try
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_get_read_try
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_add
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strech_motor
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strech_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_init)
</UL>
<P><STRONG><a name="[8c]"></a>task_camera_move</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, task_camera_move.o(i.task_camera_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = task_camera_move &rArr; resolve_add &rArr; dndqueue_add_last &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_finish_try
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_get_read_try
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_init)
</UL>
<P><STRONG><a name="[8f]"></a>task_car_rise_engineer</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, task_car_rise_engineer.o(i.task_car_rise_engineer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = task_car_rise_engineer &rArr; resolve_add &rArr; dndqueue_add_last &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_finish_try
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_get_read_try
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_add
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_rise_motor
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_rise_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_init)
</UL>
<P><STRONG><a name="[89]"></a>task_car_rise_hero</STRONG> (Thumb, 426 bytes, Stack size 96 bytes, task_car_rise_hero.o(i.task_car_rise_hero))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = task_car_rise_hero &rArr; msg_read_finish_try &rArr; task_resume &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_finish_try
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_get_read_try
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpid_v
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpid_init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_init)
</UL>
<P><STRONG><a name="[87]"></a>task_chassis</STRONG> (Thumb, 592 bytes, Stack size 24 bytes, task_chassis.o(i.task_chassis))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = task_chassis &rArr; resolve_add &rArr; dndqueue_add_last &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_finish_try
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_stop
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_move
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_speed_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_current_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Struct_Init_abs
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_speed_wave
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_data_proc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_current
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_chassis_speed
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_2s_interval
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_filter
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_get_read_try
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_add
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_init)
</UL>
<P><STRONG><a name="[8b]"></a>task_clip</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, task_clip.o(i.task_clip))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = task_clip &rArr; resolve_add &rArr; dndqueue_add_last &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_finish_try
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_get_read_try
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_add
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_init)
</UL>
<P><STRONG><a name="[153]"></a>task_create_full</STRONG> (Thumb, 734 bytes, Stack size 32 bytes, makos_task.o(i.task_create_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = task_create_full &rArr; pipe_init &rArr; irq_close &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnode_add_last
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_remote
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_led_sys
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makos_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14b]"></a>task_delay_ms</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, makos_schedule.o(i.task_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnode_add_last
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnode_remove
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makos_update_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_test
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_remote
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_guard_move
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_give
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_drag
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_clip
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_car_rise_hero
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_car_rise_engineer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_camera_move
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_bullet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_led_user
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_led_sys
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_shoot_control
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dndqueue_add_last
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resolver
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_record
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_PRINT
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_read
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_write
</UL>

<P><STRONG><a name="[8d]"></a>task_drag</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, task_drag.o(i.task_drag))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = task_drag &rArr; msg_read_finish_try &rArr; task_resume &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_finish_try
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_get_read_try
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAVE
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RM6025_set_data_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_init)
</UL>
<P><STRONG><a name="[8e]"></a>task_give</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, task_give.o(i.task_give))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = task_give &rArr; msg_read_finish_try &rArr; task_resume &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_finish_try
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_get_read_try
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;give_motor_stop
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;give_motor_open
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;give_motor_close
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_init)
</UL>
<P><STRONG><a name="[90]"></a>task_guard_move</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, task_guard.o(i.task_guard_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = task_guard_move &rArr; resolve_add &rArr; dndqueue_add_last &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_add
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guard_move_init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_init)
</UL>
<P><STRONG><a name="[73]"></a>task_idle</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, makos_idle.o(i.task_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = task_idle &rArr; mak_print &rArr; mak_print_float &rArr; mak_print_s32 &rArr; mak_print_u8 &rArr; pipe_write &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_add
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mak_print
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> makos_system.o(i.makos_init)
</UL>
<P><STRONG><a name="[6f]"></a>task_init</STRONG> (Thumb, 754 bytes, Stack size 8 bytes, task_init.o(i.task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = task_init &rArr; task_create_full &rArr; pipe_init &rArr; irq_close &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_send_msg_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_Configuration
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Configuration
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create_full
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[70]"></a>task_led_sys</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, task_led.o(i.task_led_sys))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = task_led_sys &rArr; task_create_full &rArr; pipe_init &rArr; irq_close &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mled_toggle
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mled_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create_full
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[91]"></a>task_led_user</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, task_led.o(i.task_led_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = task_led_user &rArr; resolve_add &rArr; dndqueue_add_last &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_add
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mled_toggle
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mled_off
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_led.o(i.task_led_sys)
</UL>
<P><STRONG><a name="[74]"></a>task_record</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, makos_record.o(i.task_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = task_record &rArr; resolve_add &rArr; dndqueue_add_last &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_add
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> makos_system.o(i.makos_init)
</UL>
<P><STRONG><a name="[86]"></a>task_remote</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, task_remote.o(i.task_remote))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = task_remote &rArr; dbus_init &rArr; dbus_mode_dma &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_finish
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_get_read_try
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_lift_bullet_view
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_holder_shoot
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_drag_give
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_chassis
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcopy
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create_full
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_init)
</UL>
<P><STRONG><a name="[72]"></a>task_resolver</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, makos_resolver.o(i.task_resolver))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = task_resolver &rArr; pipe_read &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_float
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_get_U32
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_compare
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolver_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipe_read
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> makos_system.o(i.makos_init)
</UL>
<P><STRONG><a name="[16b]"></a>task_resume</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, makos_schedule.o(i.task_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = task_resume &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnode_remove
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnode_add_first
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makos_update_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_finish_try
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_finish
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
</UL>

<P><STRONG><a name="[170]"></a>task_set_prio</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, makos_schedule.o(i.task_set_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = task_set_prio &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnode_add_last
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnode_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
</UL>

<P><STRONG><a name="[88]"></a>task_shoot</STRONG> (Thumb, 1414 bytes, Stack size 40 bytes, task_shoot.o(i.task_shoot))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = task_shoot &rArr; resolve_add &rArr; dndqueue_add_last &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_read_finish_try
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_get_read_try
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_add
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create_full
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_init)
</UL>
<P><STRONG><a name="[9a]"></a>task_shoot_control</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, task_shoot.o(i.task_shoot_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = task_shoot_control &rArr; task_delay_ms &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delay_ms
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_update
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpid_v
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpid_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_shoot.o(i.task_shoot)
</UL>
<P><STRONG><a name="[19f]"></a>task_suspend</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, makos_schedule.o(i.task_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = task_suspend &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnode_add_last
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnode_remove
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makos_update_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_led_sys
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>

<P><STRONG><a name="[6e]"></a>tick_handle</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, makos_tick_handle.o(i.tick_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tick_handle &rArr; makos_update_switch &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnode_add_last
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnode_remove
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makos_update_switch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> makos_tick_handle.o(i.init_tick_callback)
</UL>
<P><STRONG><a name="[15b]"></a>tick_init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, makos_tick.o(i.tick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makos_init
</UL>

<P><STRONG><a name="[15e]"></a>tick_start</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, makos_tick.o(i.tick_start))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makos_run
</UL>

<P><STRONG><a name="[7f]"></a>upper_monit_err_lim</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, task_chassis.o(i.upper_monit_err_lim))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = upper_monit_err_lim &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_err_lim
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_chassis.o(i.task_chassis)
</UL>
<P><STRONG><a name="[7e]"></a>upper_monit_kd</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, task_chassis.o(i.upper_monit_kd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = upper_monit_kd &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_D
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_chassis.o(i.task_chassis)
</UL>
<P><STRONG><a name="[7d]"></a>upper_monit_ki</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, task_chassis.o(i.upper_monit_ki))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = upper_monit_ki &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_I
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_chassis.o(i.task_chassis)
</UL>
<P><STRONG><a name="[7c]"></a>upper_monit_kp</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, task_chassis.o(i.upper_monit_kp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = upper_monit_kp &rArr; irq_restore &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_P
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_close
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_chassis.o(i.task_chassis)
</UL>
<P><STRONG><a name="[1ad]"></a>usart3_send_char</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usart.o(i.usart3_send_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart3_send_char
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_send_string
</UL>

<P><STRONG><a name="[183]"></a>usart3_send_string</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usart.o(i.usart3_send_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart3_send_string &rArr; usart3_send_char
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_send_char
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_speed_wave
</UL>

<P><STRONG><a name="[82]"></a>v_k_func</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, task_chassis.o(i.v_k_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = v_k_func &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_chassis.o(i.task_chassis)
</UL>
<P><STRONG><a name="[80]"></a>wave_key</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_chassis.o(i.wave_key))
<BR>[Address Reference Count : 1]<UL><LI> task_chassis.o(i.task_chassis)
</UL>
<P><STRONG><a name="[ac]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[18a]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_k_func
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_kp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_ki
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_kd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_err_lim
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_float
</UL>

<P><STRONG><a name="[1b1]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1b8]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[194]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
</UL>

<P><STRONG><a name="[1b4]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[197]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
</UL>

<P><STRONG><a name="[1b6]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[193]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
</UL>

<P><STRONG><a name="[1ed]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[1a8]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_k_func
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_kp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_ki
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_kd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_err_lim
</UL>

<P><STRONG><a name="[1ee]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[196]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
</UL>

<P><STRONG><a name="[1b7]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[1bb]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[189]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_k_func
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_kp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_ki
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_kd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_err_lim
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_float
</UL>

<P><STRONG><a name="[1b9]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1b3]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1b5]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[195]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
</UL>

<P><STRONG><a name="[1ba]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_k_func
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_kp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_ki
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_kd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_monit_err_lim
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_show
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_chassis
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_float
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resolver
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_idle
</UL>

<P><STRONG><a name="[1bc]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[1bd]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[a8]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1ef]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1f0]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1b2]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[a0]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1a0]"></a>memcopy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, task_remote.o(i.memcopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = memcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_remote
</UL>

<P><STRONG><a name="[8]"></a>emptyf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dbus.o(i.emptyf))
<BR>[Address Reference Count : 1]<UL><LI> dbus.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>emptyf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i.emptyf))
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[112]"></a>SetSysClock</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[f8]"></a>CheckITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CheckITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
</UL>

<P><STRONG><a name="[124]"></a>TI1_Config</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32f4xx_tim.o(i.TI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[126]"></a>TI2_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f4xx_tim.o(i.TI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[128]"></a>TI3_Config</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f4xx_tim.o(i.TI3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[12a]"></a>TI4_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f4xx_tim.o(i.TI4_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI4_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[c0]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[6b]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
